import streamlit as st
import requests
import json
import os
from datetime import datetime, date
import pandas as pd

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu·∫£n l√Ω Thu Chi C√° Nh√¢n",
    page_icon="üí∞",
    layout="wide"
)

# L·∫•y URL t·ª´ environment variable
SHEET_URL_KEY = os.getenv('SHEET_URL_KEY')

if not SHEET_URL_KEY:
    st.error("‚ùå Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng SHEET_URL_KEY")
    st.stop()

# Danh m·ª•c thu chi
INCOME_CATEGORIES = ["L∆∞∆°ng"]
EXPENSE_CATEGORIES = [
    "Ti·ªÅn ƒÉn",
    "Ti·ªÅn xƒÉng di chuy·ªÉn", 
    "Ti·ªÅn tr·ªç",
    "Ti·ªÅn ƒëi·ªán",
    "Ti·ªÅn n∆∞·ªõc",
    "Ti·ªÅn m·∫°ng 4G",
    "S·ª≠a xe",
    "Y t·∫ø",
    "D·ªãch v·ª• m·∫°ng",
    "Kh√°c"
]

def send_to_sheet(data):
    """G·ª≠i d·ªØ li·ªáu ƒë·∫øn Google Apps Script"""
    try:
        response = requests.post(SHEET_URL_KEY, json=data, timeout=30)
        if response.status_code == 200:
            return True, "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!"
        else:
            return False, f"L·ªói: {response.status_code} - {response.text}"
    except Exception as e:
        return False, f"L·ªói k·∫øt n·ªëi: {str(e)}"

def main():
    st.title("üí∞ Qu·∫£n L√Ω Thu Chi C√° Nh√¢n")
    
    # Sidebar ƒë·ªÉ ch·ªçn th√°ng/nƒÉm
    with st.sidebar:
        st.header("üìÖ Ch·ªçn th·ªùi gian")
        selected_month = st.selectbox(
            "Th√°ng:",
            range(1, 13),
            index=datetime.now().month - 1,
            format_func=lambda x: f"Th√°ng {x}"
        )
        selected_year = st.selectbox(
            "NƒÉm:",
            range(2020, 2030),
            index=datetime.now().year - 2020
        )
        
        sheet_name = f"{selected_month:02d}/{selected_year}"
        st.info(f"üìä Sheet hi·ªán t·∫°i: **{sheet_name}**")

    # Tabs ch√≠nh
    tab1, tab2, tab3 = st.tabs(["üíµ Thu Nh·∫≠p", "üí∏ Chi Ti√™u", "üìä B√°o C√°o"])
    
    # Tab Thu Nh·∫≠p
    with tab1:
        st.header("üíµ Ghi Nh·∫≠n Thu Nh·∫≠p")
        
        col1, col2 = st.columns(2)
        with col1:
            income_date = st.date_input("üìÖ Ng√†y:", key="income_date")
            income_category = st.selectbox("üìÇ Danh m·ª•c:", INCOME_CATEGORIES, key="income_category")
        
        with col2:
            income_amount = st.number_input("üí∞ S·ªë ti·ªÅn (VNƒê):", min_value=0, step=1000, key="income_amount")
            income_note = st.text_input("üìù Ghi ch√∫:", key="income_note")
        
        if st.button("‚úÖ Th√™m Thu Nh·∫≠p", type="primary"):
            if income_amount > 0:
                data = {
                    "action": "add_transaction",
                    "sheet_name": sheet_name,
                    "transaction": {
                        "date": income_date.strftime("%Y-%m-%d"),
                        "type": "Thu",
                        "category": income_category,
                        "amount": income_amount,
                        "note": income_note
                    }
                }
                
                success, message = send_to_sheet(data)
                if success:
                    st.success(message)
                else:
                    st.error(message)
            else:
                st.error("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!")

    # Tab Chi Ti√™u
    with tab2:
        st.header("üí∏ Ghi Nh·∫≠n Chi Ti√™u")
        
        col1, col2 = st.columns(2)
        with col1:
            expense_date = st.date_input("üìÖ Ng√†y:", key="expense_date")
            expense_category = st.selectbox("üìÇ Danh m·ª•c:", EXPENSE_CATEGORIES, key="expense_category")
        
        with col2:
            expense_amount = st.number_input("üí∞ S·ªë ti·ªÅn (VNƒê):", min_value=0, step=1000, key="expense_amount")
            expense_note = st.text_input("üìù Ghi ch√∫:", key="expense_note")
        
        if st.button("‚úÖ Th√™m Chi Ti√™u", type="primary"):
            if expense_amount > 0:
                data = {
                    "action": "add_transaction",
                    "sheet_name": sheet_name,
                    "transaction": {
                        "date": expense_date.strftime("%Y-%m-%d"),
                        "type": "Chi",
                        "category": expense_category,
                        "amount": expense_amount,
                        "note": expense_note
                    }
                }
                
                success, message = send_to_sheet(data)
                if success:
                    st.success(message)
                else:
                    st.error(message)
            else:
                st.error("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!")

    # Tab B√°o C√°o
    with tab3:
        st.header("üìä B√°o C√°o Th√°ng " + sheet_name)
        
        col1, col2 = st.columns(2)
        
        if st.button("üîÑ L·∫•y B√°o C√°o", type="primary"):
            data = {
                "action": "get_summary",
                "sheet_name": sheet_name
            }
            
            try:
                response = requests.post(SHEET_URL_KEY, json=data, timeout=30)
                if response.status_code == 200:
                    summary_data = response.json()
                    
                    with col1:
                        st.metric("üíµ T·ªïng Thu", f"{summary_data.get('total_income', 0):,} VNƒê")
                        st.metric("üí∏ T·ªïng Chi", f"{summary_data.get('total_expense', 0):,} VNƒê")
                    
                    with col2:
                        balance = summary_data.get('total_income', 0) - summary_data.get('total_expense', 0)
                        st.metric("üí∞ S·ªë D∆∞", f"{balance:,} VNƒê", delta=balance)
                    
                    # Hi·ªÉn th·ªã chi ti·∫øt theo danh m·ª•c
                    if 'expense_by_category' in summary_data:
                        st.subheader("üìà Chi Ti·∫øt Chi Ti√™u Theo Danh M·ª•c")
                        
                        expense_df = pd.DataFrame(
                            list(summary_data['expense_by_category'].items()),
                            columns=['Danh M·ª•c', 'S·ªë Ti·ªÅn']
                        )
                        expense_df['S·ªë Ti·ªÅn'] = expense_df['S·ªë Ti·ªÅn'].apply(lambda x: f"{x:,} VNƒê")
                        st.dataframe(expense_df, use_container_width=True)
                    
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ l·∫•y b√°o c√°o!")
                    
            except Exception as e:
                st.error(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")

    # Footer
    st.markdown("---")
    st.markdown("üí° **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**")
    st.markdown("1. Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng `SHEET_URL_KEY` v·ªõi URL Google Apps Script")
    st.markdown("2. Ch·ªçn th√°ng/nƒÉm ·ªü sidebar")
    st.markdown("3. Th√™m thu nh·∫≠p v√† chi ti√™u trong c√°c tab t∆∞∆°ng ·ª©ng")
    st.markdown("4. Xem b√°o c√°o trong tab 'B√°o C√°o'")

if __name__ == "__main__":
    main()
