import streamlit as st
import requests
import json
import os
from datetime import datetime, date, timedelta
import pandas as pd
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu·∫£n l√Ω Thu Chi C√° Nh√¢n",
    page_icon="üí∞",
    layout="wide"
)

# Kh·ªüi t·∫°o session state
if 'last_update' not in st.session_state:
    st.session_state.last_update = None
if 'cached_summary' not in st.session_state:
    st.session_state.cached_summary = None

# L·∫•y URL t·ª´ environment variable
SHEET_URL_KEY = os.getenv('SHEET_URL_KEY')

if not SHEET_URL_KEY:
    st.error("‚ùå Vui l√≤ng thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng SHEET_URL_KEY")
    st.info("üí° **H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p:**")
    st.code("export SHEET_URL_KEY='your_google_apps_script_url'")
    st.stop()

# Danh m·ª•c thu chi
INCOME_CATEGORIES = ["L∆∞∆°ng", "Th∆∞·ªüng", "Kinh doanh", "ƒê·∫ßu t∆∞", "Kh√°c"]
EXPENSE_CATEGORIES = [
    "Ti·ªÅn ƒÉn",
    "Ti·ªÅn xƒÉng di chuy·ªÉn", 
    "Ti·ªÅn tr·ªç",
    "Ti·ªÅn ƒëi·ªán",
    "Ti·ªÅn n∆∞·ªõc",
    "Ti·ªÅn m·∫°ng 4G",
    "S·ª≠a xe",
    "Y t·∫ø",
    "D·ªãch v·ª• m·∫°ng",
    "Mua s·∫Øm",
    "Gi·∫£i tr√≠",
    "H·ªçc t·∫≠p",
    "Kh√°c"
]

def validate_amount(amount):
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa s·ªë ti·ªÅn"""
    if amount <= 0:
        return False, "S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0"
    if amount > 1000000000:  # 1 t·ª∑
        return False, "S·ªë ti·ªÅn qu√° l·ªõn (t·ªëi ƒëa 1 t·ª∑ VNƒê)"
    return True, ""

def validate_date(input_date):
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ng√†y"""
    today = date.today()
    if input_date > today:
        return False, "Kh√¥ng th·ªÉ ch·ªçn ng√†y trong t∆∞∆°ng lai"
    if input_date < date(2020, 1, 1):
        return False, "Ng√†y kh√¥ng h·ª£p l·ªá (t·ª´ nƒÉm 2020 tr·ªü l√™n)"
    return True, ""

def send_to_sheet(data):
    """G·ª≠i d·ªØ li·ªáu ƒë·∫øn Google Apps Script v·ªõi x·ª≠ l√Ω l·ªói c·∫£i ti·∫øn"""
    try:
        # Ki·ªÉm tra k·∫øt n·ªëi internet c∆° b·∫£n
        test_response = requests.get("https://www.google.com", timeout=5)
        if test_response.status_code != 200:
            return False, "‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi internet"
            
    except requests.exceptions.RequestException:
        return False, "‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi internet"
    
    try:
        with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu...'):
            response = requests.post(
                SHEET_URL_KEY, 
                json=data, 
                timeout=45,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                # Reset cache khi c√≥ c·∫≠p nh·∫≠t
                st.session_state.last_update = time.time()
                st.session_state.cached_summary = None
                return True, "‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!"
            elif response.status_code == 429:
                return False, "‚è∞ Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau"
            elif response.status_code == 403:
                return False, "üîí Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p, ki·ªÉm tra URL"
            else:
                return False, f"‚ùå L·ªói m√°y ch·ªß: {response.status_code}"
                
    except requests.exceptions.Timeout:
        return False, "‚è∞ K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i"
    except requests.exceptions.ConnectionError:
        return False, "‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß"
    except Exception as e:
        return False, f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)[:100]}"

def get_summary_data(sheet_name):
    """L·∫•y d·ªØ li·ªáu b√°o c√°o v·ªõi cache"""
    # Ki·ªÉm tra cache (cache trong 5 ph√∫t)
    if (st.session_state.cached_summary and 
        st.session_state.last_update and 
        time.time() - st.session_state.last_update < 300):
        return True, st.session_state.cached_summary
    
    data = {
        "action": "get_summary",
        "sheet_name": sheet_name
    }
    
    try:
        with st.spinner('ƒêang t·∫£i b√°o c√°o...'):
            response = requests.post(
                SHEET_URL_KEY, 
                json=data, 
                timeout=30,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                summary_data = response.json()
                # Cache k·∫øt qu·∫£
                st.session_state.cached_summary = summary_data
                st.session_state.last_update = time.time()
                return True, summary_data
            else:
                return False, f"L·ªói {response.status_code}: Kh√¥ng th·ªÉ t·∫£i b√°o c√°o"
                
    except requests.exceptions.Timeout:
        return False, "Timeout: Kh√¥ng th·ªÉ t·∫£i b√°o c√°o"
    except Exception as e:
        return False, f"L·ªói: {str(e)[:100]}"

def format_currency(amount):
    """Format s·ªë ti·ªÅn theo ƒë·ªãnh d·∫°ng VN"""
    try:
        return f"{int(amount):,}".replace(',', '.') + " VNƒê"
    except:
        return "0 VNƒê"

def main():
    st.title("üí∞ Qu·∫£n L√Ω Thu Chi C√° Nh√¢n")
    
    # Sidebar ƒë·ªÉ ch·ªçn th√°ng/nƒÉm
    with st.sidebar:
        st.header("üìÖ Ch·ªçn th·ªùi gian")
        
        # S·ª≠ d·ª•ng date input ƒë·ªÉ ch·ªçn th√°ng/nƒÉm d·ªÖ d√†ng h∆°n
        today = datetime.now()
        selected_date = st.date_input(
            "Ch·ªçn th√°ng/nƒÉm:",
            value=today.date(),
            min_value=date(2020, 1, 1),
            max_value=today.date(),
            help="Ch·ªçn m·ªôt ng√†y b·∫•t k·ª≥ trong th√°ng b·∫°n mu·ªën qu·∫£n l√Ω"
        )
        
        selected_month = selected_date.month
        selected_year = selected_date.year
        
        sheet_name = f"{selected_month:02d}/{selected_year}"
        st.info(f"üìä Sheet hi·ªán t·∫°i: **{sheet_name}**")
        
        # Th√™m n√∫t clear cache
        if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
            st.session_state.cached_summary = None
            st.session_state.last_update = None
            st.rerun()

    # Tabs ch√≠nh
    tab1, tab2, tab3 = st.tabs(["üíµ Thu Nh·∫≠p", "üí∏ Chi Ti√™u", "üìä B√°o C√°o"])
    
    # Tab Thu Nh·∫≠p
    with tab1:
        st.header("üíµ Ghi Nh·∫≠n Thu Nh·∫≠p")
        
        with st.form("income_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            
            with col1:
                income_date = st.date_input(
                    "üìÖ Ng√†y:", 
                    value=today.date(),
                    max_value=today.date(),
                    min_value=date(selected_year, selected_month, 1),
                    help="Ch·ªçn ng√†y thu nh·∫≠p"
                )
                income_category = st.selectbox(
                    "üìÇ Danh m·ª•c:", 
                    INCOME_CATEGORIES,
                    help="Ch·ªçn lo·∫°i thu nh·∫≠p"
                )
            
            with col2:
                income_amount = st.number_input(
                    "üí∞ S·ªë ti·ªÅn (VNƒê):", 
                    min_value=0,
                    max_value=1000000000,
                    step=1000,
                    help="Nh·∫≠p s·ªë ti·ªÅn thu nh·∫≠p"
                )
                income_note = st.text_input(
                    "üìù Ghi ch√∫:", 
                    max_chars=200,
                    help="M√¥ t·∫£ chi ti·∫øt (t√πy ch·ªçn)"
                )
            
            submitted = st.form_submit_button("‚úÖ Th√™m Thu Nh·∫≠p", type="primary")
            
            if submitted:
                # Validate d·ªØ li·ªáu
                amount_valid, amount_msg = validate_amount(income_amount)
                date_valid, date_msg = validate_date(income_date)
                
                if not amount_valid:
                    st.error(f"‚ùå {amount_msg}")
                elif not date_valid:
                    st.error(f"‚ùå {date_msg}")
                else:
                    data = {
                        "action": "add_transaction",
                        "sheet_name": sheet_name,
                        "transaction": {
                            "date": income_date.strftime("%Y-%m-%d"),
                            "type": "Thu",
                            "category": income_category,
                            "amount": income_amount,
                            "note": income_note.strip()
                        }
                    }
                    
                    success, message = send_to_sheet(data)
                    if success:
                        st.success(message)
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error(message)

    # Tab Chi Ti√™u
    with tab2:
        st.header("üí∏ Ghi Nh·∫≠n Chi Ti√™u")
        
        with st.form("expense_form", clear_on_submit=True):
            col1, col2 = st.columns(2)
            
            with col1:
                expense_date = st.date_input(
                    "üìÖ Ng√†y:", 
                    value=today.date(),
                    max_value=today.date(),
                    min_value=date(selected_year, selected_month, 1),
                    help="Ch·ªçn ng√†y chi ti√™u"
                )
                expense_category = st.selectbox(
                    "üìÇ Danh m·ª•c:", 
                    EXPENSE_CATEGORIES,
                    help="Ch·ªçn lo·∫°i chi ti√™u"
                )
            
            with col2:
                expense_amount = st.number_input(
                    "üí∞ S·ªë ti·ªÅn (VNƒê):", 
                    min_value=0,
                    max_value=1000000000,
                    step=1000,
                    help="Nh·∫≠p s·ªë ti·ªÅn chi ti√™u"
                )
                expense_note = st.text_input(
                    "üìù Ghi ch√∫:", 
                    max_chars=200,
                    help="M√¥ t·∫£ chi ti·∫øt (t√πy ch·ªçn)"
                )
            
            submitted = st.form_submit_button("‚úÖ Th√™m Chi Ti√™u", type="primary")
            
            if submitted:
                # Validate d·ªØ li·ªáu
                amount_valid, amount_msg = validate_amount(expense_amount)
                date_valid, date_msg = validate_date(expense_date)
                
                if not amount_valid:
                    st.error(f"‚ùå {amount_msg}")
                elif not date_valid:
                    st.error(f"‚ùå {date_msg}")
                else:
                    data = {
                        "action": "add_transaction",
                        "sheet_name": sheet_name,
                        "transaction": {
                            "date": expense_date.strftime("%Y-%m-%d"),
                            "type": "Chi",
                            "category": expense_category,
                            "amount": expense_amount,
                            "note": expense_note.strip()
                        }
                    }
                    
                    success, message = send_to_sheet(data)
                    if success:
                        st.success(message)
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error(message)

    # Tab B√°o C√°o
    with tab3:
        st.header(f"üìä B√°o C√°o Th√°ng {selected_month:02d}/{selected_year}")
        
        # Auto load b√°o c√°o
        success, result = get_summary_data(sheet_name)
        
        if success:
            summary_data = result
            
            # Metrics ch√≠nh
            col1, col2, col3 = st.columns(3)
            
            total_income = summary_data.get('total_income', 0)
            total_expense = summary_data.get('total_expense', 0)
            balance = total_income - total_expense
            
            with col1:
                st.metric(
                    "üíµ T·ªïng Thu", 
                    format_currency(total_income)
                )
            
            with col2:
                st.metric(
                    "üí∏ T·ªïng Chi", 
                    format_currency(total_expense)
                )
            
            with col3:
                st.metric(
                    "üí∞ S·ªë D∆∞", 
                    format_currency(balance),
                    delta=f"{balance:,.0f} VNƒê".replace(',', '.'),
                    delta_color="normal" if balance >= 0 else "inverse"
                )
            
            # Bi·ªÉu ƒë·ªì v√† b·∫£ng chi ti·∫øt
            if total_expense > 0 and 'expense_by_category' in summary_data:
                st.subheader("üìà Chi Ti·∫øt Chi Ti√™u Theo Danh M·ª•c")
                
                expense_data = summary_data['expense_by_category']
                if expense_data:
                    # T·∫°o DataFrame
                    df = pd.DataFrame(
                        list(expense_data.items()),
                        columns=['Danh M·ª•c', 'S·ªë Ti·ªÅn']
                    )
                    df['T·ª∑ l·ªá %'] = (df['S·ªë Ti·ªÅn'] / total_expense * 100).round(1)
                    df['S·ªë Ti·ªÅn (VNƒê)'] = df['S·ªë Ti·ªÅn'].apply(format_currency)
                    
                    # S·∫Øp x·∫øp theo s·ªë ti·ªÅn gi·∫£m d·∫ßn
                    df = df.sort_values('S·ªë Ti·ªÅn', ascending=False)
                    
                    # Hi·ªÉn th·ªã b·∫£ng
                    st.dataframe(
                        df[['Danh M·ª•c', 'S·ªë Ti·ªÅn (VNƒê)', 'T·ª∑ l·ªá %']], 
                        use_container_width=True,
                        hide_index=True
                    )
                    
                    # Bi·ªÉu ƒë·ªì tr√≤n
                    st.subheader("ü•ß Bi·ªÉu ƒê·ªì Ph√¢n B·ªï Chi Ti√™u")
                    chart_data = df.set_index('Danh M·ª•c')['S·ªë Ti·ªÅn']
                    st.bar_chart(chart_data)
            
            # Th√¥ng tin b·ªï sung
            if st.session_state.last_update:
                update_time = datetime.fromtimestamp(st.session_state.last_update)
                st.caption(f"üìÖ C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {update_time.strftime('%H:%M:%S %d/%m/%Y')}")
        
        else:
            st.error(f"‚ùå {result}")
            if st.button("üîÑ Th·ª≠ l·∫°i"):
                st.rerun()

    # Footer
    st.markdown("---")
    st.markdown("üí° **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**")
    with st.expander("üìñ Xem h∆∞·ªõng d·∫´n chi ti·∫øt"):
        st.markdown("""
        1. **Thi·∫øt l·∫≠p:** ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng `SHEET_URL_KEY` v·ªõi URL Google Apps Script
        2. **Ch·ªçn th·ªùi gian:** S·ª≠ d·ª•ng sidebar ƒë·ªÉ ch·ªçn th√°ng/nƒÉm c·∫ßn qu·∫£n l√Ω
        3. **Th√™m giao d·ªãch:** S·ª≠ d·ª•ng form trong c√°c tab ƒë·ªÉ th√™m thu nh·∫≠p v√† chi ti√™u
        4. **Xem b√°o c√°o:** Tab b√°o c√°o s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã th·ªëng k√™ th√°ng hi·ªán t·∫°i
        5. **L√†m m·ªõi:** S·ª≠ d·ª•ng n√∫t "L√†m m·ªõi d·ªØ li·ªáu" n·∫øu c·∫ßn c·∫≠p nh·∫≠t th√¥ng tin
        
        **L∆∞u √Ω:**
        - S·ªë ti·ªÅn t·ªëi ƒëa: 1 t·ª∑ VNƒê
        - Kh√¥ng th·ªÉ ch·ªçn ng√†y trong t∆∞∆°ng lai
        - D·ªØ li·ªáu ƒë∆∞·ª£c cache 5 ph√∫t ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
        """)

if __name__ == "__main__":
    main()
